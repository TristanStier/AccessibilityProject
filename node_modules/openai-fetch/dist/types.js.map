{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { OpenAI } from '../openai-types/index.js';\n\nexport type ChatMessage = {\n  /** The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls. */\n  content: string | null;\n  /** The role of the messages author. One of `system`, `user`, `assistant`, 'tool', or `function`. */\n  role: Role;\n  /** The name and arguments of a function that should be called, as generated by the model. */\n  function_call?: FunctionCall;\n  /** The tool calls generated by the model, such as function calls. */\n  tool_calls?: ToolCall[];\n  /**\n   * Tool call that this message is responding to.\n   */\n  tool_call_id?: string;\n  /**\n   * The name of the author of this message. `name` is required if role is\n   * `function`, and it should be the name of the function whose response is in the\n   * `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of\n   * 64 characters.\n   */\n  name?: string;\n};\n\n/** The possible roles for a message. */\nexport type Role = 'system' | 'user' | 'assistant' | 'function' | 'tool';\n\n/** The name and arguments of a function that should be called, as generated by the model. */\nexport type FunctionCall = {\n  /** The arguments to call the function with, as generated by the model in JSON format. */\n  arguments: string;\n  /** The name of the function to call. */\n  name: string;\n};\n\n/** The tool calls generated by the model, such as function calls. */\nexport type ToolCall = {\n  /** The ID of the tool call. */\n  id: string;\n  /** The type of the tool. Currently, only `function` is supported. */\n  type: 'function';\n  /** The function that the model called. */\n  function: FunctionCall;\n};\n\nexport type ChatParams = Omit<\n  OpenAI.ChatCompletionCreateParams,\n  'stream' | 'messages'\n> & { messages: ChatMessage[] };\nexport type ChatResponse = OpenAI.ChatCompletion;\n\nexport type ChatStreamParams = ChatParams;\nexport type ChatStreamChunk = OpenAI.ChatCompletionChunk;\nexport type ChatStreamResponse = ReadableStream<ChatStreamChunk>;\n\nexport type CompletionParams = Omit<OpenAI.CompletionCreateParams, 'stream'>;\nexport type CompletionResponse = OpenAI.Completion;\n\nexport type CompletionStreamParams = Omit<\n  OpenAI.CompletionCreateParams,\n  'prompt'\n> & { prompt: string };\nexport type CompletionStreamResponse = ReadableStream<OpenAI.Completion>;\n\nexport type EmbeddingParams = OpenAI.EmbeddingCreateParams;\nexport type EmbeddingResponse = OpenAI.CreateEmbeddingResponse;\n"]}