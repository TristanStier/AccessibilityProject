{"version":3,"file":"openai-client.js","sourceRoot":"","sources":["../src/openai-client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OpenAI } from 'openai';\nimport type { KyOptions } from './fetch-api.js';\nimport { createApiInstance } from './fetch-api.js';\nimport { StreamCompletionChunker } from './streaming.js';\nimport type {\n  ChatParams,\n  ChatResponse,\n  ChatStreamParams,\n  ChatStreamResponse,\n  CompletionParams,\n  CompletionResponse,\n  CompletionStreamParams,\n  CompletionStreamResponse,\n  EmbeddingParams,\n  EmbeddingResponse,\n} from './types.js';\n\nexport type ConfigOpts = {\n  /**\n   * The API key used to authenticate with the OpenAI API.\n   * @see https://platform.openai.com/account/api-keys\n   */\n  apiKey?: string;\n  /**\n   * The organization ID that should be billed for API requests.\n   * This is only necessary if your API key is scoped to multiple organizations.\n   * @see https://platform.openai.com/docs/api-reference/organization-optional\n   */\n  organizationId?: string;\n  /**\n   * The HTTP endpoint for the OpenAI API. You probably don't want to change this.\n   * @default https://api.openai.com/v1\n   */\n  baseUrl?: string;\n  /**\n   * Options to pass to the underlying fetch library (Ky).\n   * @see https://github.com/sindresorhus/ky/tree/main#options\n   */\n  kyOptions?: KyOptions;\n};\n\n/** Override the default Ky options for a single request. */\ntype RequestOpts = { headers?: KyOptions['headers'] };\n\nexport class OpenAIClient {\n  private api: ReturnType<typeof createApiInstance>;\n\n  constructor(opts: ConfigOpts = {}) {\n    const process = globalThis.process || { env: {} };\n    const apiKey = opts.apiKey || process.env['OPENAI_API_KEY'];\n    const organizationId = opts.organizationId || process.env['OPENAI_ORG_ID'];\n    if (!apiKey)\n      throw new Error(\n        'Missing OpenAI API key. Please provide one in the config or set the OPENAI_API_KEY environment variable.',\n      );\n    this.api = createApiInstance({\n      apiKey,\n      baseUrl: opts.baseUrl,\n      organizationId,\n      kyOptions: opts.kyOptions,\n    });\n  }\n\n  private getApi(opts?: RequestOpts) {\n    return opts ? this.api.extend(opts) : this.api;\n  }\n\n  /** Create a completion for a chat message. */\n  async createChatCompletion(\n    params: ChatParams,\n    opts?: RequestOpts,\n  ): Promise<ChatResponse> {\n    const response: OpenAI.ChatCompletion = await this.getApi(opts)\n      .post('chat/completions', { json: params })\n      .json();\n    return response;\n  }\n\n  /** Create a chat completion and stream back partial progress. */\n  async streamChatCompletion(\n    params: ChatStreamParams,\n    opts?: RequestOpts,\n  ): Promise<ChatStreamResponse> {\n    const response = await this.getApi(opts).post('chat/completions', {\n      json: { ...params, stream: true },\n      onDownloadProgress: () => {}, // trick ky to return ReadableStream.\n    });\n    const stream = response.body as ReadableStream;\n    return stream.pipeThrough(\n      new StreamCompletionChunker(\n        (response: OpenAI.ChatCompletionChunk) => response,\n      ),\n    );\n  }\n\n  /** Create completions for an array of prompt strings. */\n  async createCompletions(\n    params: CompletionParams,\n    opts?: RequestOpts,\n  ): Promise<CompletionResponse> {\n    const response: OpenAI.Completion = await this.getApi(opts)\n      .post('completions', { json: params })\n      .json();\n    return response;\n  }\n\n  /** Create a completion for a single prompt string and stream back partial progress. */\n  async streamCompletion(\n    params: CompletionStreamParams,\n    opts?: RequestOpts,\n  ): Promise<CompletionStreamResponse> {\n    const response = await this.getApi(opts).post('completions', {\n      json: { ...params, stream: true },\n      onDownloadProgress: () => {}, // trick ky to return ReadableStream.\n    });\n    const stream = response.body as ReadableStream;\n    return stream.pipeThrough(\n      new StreamCompletionChunker((response: OpenAI.Completion) => response),\n    );\n  }\n\n  /** Create an embedding vector representing the input text. */\n  async createEmbeddings(\n    params: EmbeddingParams,\n    opts?: RequestOpts,\n  ): Promise<EmbeddingResponse> {\n    const response: OpenAI.CreateEmbeddingResponse = await this.getApi(opts)\n      .post('embeddings', { json: params })\n      .json();\n    return response;\n  }\n}\n"]}